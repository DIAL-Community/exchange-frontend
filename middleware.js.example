import { NextResponse } from 'next/server'

/**
 * @param req
 */
export function middleware(req) {
  const { pathname } = req.nextUrl

  const hostname = req.headers.get('host')

  const tenantList = [
    { url: 'govstack', currentHost: 'govstack' },
    { url: 'gosl', currentHost: 'gosl' },
    { url: 'dpi', currentHost: 'dpi' }
  ]

  const currentHost = tenantList.filter(tenant => hostname?.includes(tenant.url))[0]?.currentHost || 'default'
  // Prevent security issues â€“ users should not be able to canonically access
  // the pages/sites folder and its respective contents. This can also be done
  // via rewrites to a custom 404 page
  if (pathname.startsWith('/_sites')) {
    return new Response(null, { status: 404 })
  }

  if (
    currentHost !== 'default' &&
    !pathname.includes('/_next') && // exclude all files in the public folder
    !pathname.includes('/image') && // exclude all images
    !pathname.startsWith('/api') && // exclude all API routes
    !pathname.startsWith('/auth')
  ) {
    // rewrite to the current hostname under the pages/sites folder
    // the main logic component will happen in pages/sites/[site]/index.tsx
    const url = req.nextUrl.clone()
    url.pathname = `/_sites/${currentHost}${pathname}`

    return NextResponse.rewrite(url)
  }
}
